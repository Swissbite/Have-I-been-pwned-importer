/*
 * This file is generated by jOOQ.
 */
package net.daester.david.haveIBeenPwnedImporter.jooq.tables.records


import java.time.LocalDateTime

import net.daester.david.haveIBeenPwnedImporter.jooq.tables.Hash

import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class HashRecord() : TableRecordImpl<HashRecord>(Hash.HASH) {

    open var hashPrefix: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open var hashSuffix: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var occurrence: Int?
        set(value): Unit = set(2, value)
        get(): Int? = get(2) as Int?

    open var fileHash: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var lastUpdate: LocalDateTime?
        set(value): Unit = set(4, value)
        get(): LocalDateTime? = get(4) as LocalDateTime?

    /**
     * Create a detached, initialised HashRecord
     */
    constructor(hashPrefix: String? = null, hashSuffix: String? = null, occurrence: Int? = null, fileHash: String? = null, lastUpdate: LocalDateTime? = null): this() {
        this.hashPrefix = hashPrefix
        this.hashSuffix = hashSuffix
        this.occurrence = occurrence
        this.fileHash = fileHash
        this.lastUpdate = lastUpdate
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised HashRecord
     */
    constructor(value: net.daester.david.haveIBeenPwnedImporter.jooq.tables.pojos.Hash?): this() {
        if (value != null) {
            this.hashPrefix = value.hashPrefix
            this.hashSuffix = value.hashSuffix
            this.occurrence = value.occurrence
            this.fileHash = value.fileHash
            this.lastUpdate = value.lastUpdate
            resetChangedOnNotNull()
        }
    }
}
